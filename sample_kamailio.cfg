#!KAMAILIO
#
# Sample Kamailio Configuration with Web3 Authentication
# This configuration demonstrates how to use the web3_auth module
# for blockchain-based SIP authentication
#

####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL0
fork=yes
children=4

# Set listen address and port
listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:5060

# Set domain
domain="sip.example.com"

####### Modules Section ########

# Core modules
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"

# Authentication modules
loadmodule "auth.so"
loadmodule "web3_auth.so"

# Registration module
loadmodule "registrar.so"
loadmodule "usrloc.so"

####### Module Parameters #########

# Web3 authentication module parameters
modparam("web3_auth", "rpc_url", "https://testnet.sapphire.oasis.dev")
modparam("web3_auth", "contract_address", "0x1b55e67Ce5118559672Bf9EC0564AE3A46C41000")

# Transaction module parameters
modparam("tm", "fr_timer", 5)
modparam("tm", "fr_inv_timer", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

# User location module parameters
modparam("usrloc", "db_mode", 0)
modparam("usrloc", "nat_bflag", 6)

# Registrar module parameters
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)

####### Routing Logic ########

# Main request route
request_route {
    # per request initial checks
    route(REQINIT);

    # Handle retransmissions
    if(t_precheck_trans()) {
        t_check_trans();
        exit;
    }
    t_check_trans();

    # Handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)

    # Record routing for dialog forming requests
    if(is_method("INVITE|SUBSCRIBE"))
        record_route();

    # Dispatch requests to foreign domains
    route(SIPOUT);

    ### requests for our domain
    
    # Handle REGISTER requests
    if(is_method("REGISTER")) {
        route(REGISTRAR);
        exit;
    }

    if($rU==$null) {
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # User location service
    route(LOCATION);
}

# Request initial checks
route[REQINIT] {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xlog("Malformed SIP request from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if(has_totag()) {
        # sequential request within a dialog should
        # take the path determined by record-routing
        if(loose_route()) {
            if(is_method("BYE")) {
                setflag(FLT_ACC); # do accounting ...
                setflag(FLT_ACCFAILED); # ... even if the transaction fails
            }
            else if ( is_method("ACK") ) {
                # ACK is forwarded statelessy
                route(NATMANAGE);
            }
            else if ( is_method("NOTIFY") ) {
                # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
                record_route();
            }
            route(RELAY);
        } else {
            if(is_method("SUBSCRIBE") && uri == myself) {
                # in-dialog subscribe requests
                route(PRESENCE);
                exit;
            }
            if ( is_method("ACK") ) {
                if ( t_check_trans() ) {
                    # no loose-route, but stateful ACK;
                    # must be an ACK after a 487
                    # or e.g. 404 from upstream server
                    route(RELAY);
                    exit;
                } else {
                    # ACK without matching transaction ... ignore and discard
                    exit;
                }
            }
            sl_send_reply("404","Not here");
        }
        exit;
    }
}

# REGISTRAR processing with Web3 authentication
route[REGISTRAR] {
    if(is_method("REGISTER")) {
        # Apply rate limiting if needed
        if(isflagset(FLT_NATS)) {
            setbflag(FLB_NATB);
            # uncomment next line to do SIP NAT pinging 
            ## setbflag(FLB_NATSIPPING);
        }
        
        # Perform Web3 authentication
        route(WEB3_AUTH);
        
        if(!save("location")) {
            sl_reply_error();
        }
        exit;
    }
}

# Web3 Authentication Route
route[WEB3_AUTH] {
    xlog("L_INFO", "Web3 authentication check for $fU from $si:$sp\n");
    
    # Check if Authorization header is present
    if(!is_present_hf("Authorization")) {
        xlog("L_INFO", "No Authorization header - challenging $fU\n");
        auth_challenge("$fd", "0");
        exit;
    }
    
    # Perform blockchain authentication
    if(web3_auth_check()) {
        xlog("L_INFO", "Web3 authentication successful for $fU@$fd\n");
        return;
    } else {
        xlog("L_INFO", "Web3 authentication failed for $fU@$fd\n");
        sl_send_reply("403", "Forbidden - Invalid blockchain credentials");
        exit;
    }
}

# User location service
route[LOCATION] {
    # Search for location in usrloc table
    if(!lookup("location")) {
        $var(rc) = $rc;
        route(TOVOICEMAIL);
        t_newtran();
        switch ($var(rc)) {
            case -1:
            case -3:
                send_reply("404", "Not Found");
                exit;
            case -2:
                send_reply("405", "Method Not Allowed");
                exit;
        }
    }

    # When routing via usrloc, log the missed calls also
    if (is_method("INVITE")) {
        setflag(FLT_ACCMISSED);
    }

    route(RELAY);
    exit;
}

# Routing to foreign domains
route[SIPOUT] {
    if(!uri==myself) {
        append_hf("P-hint: outbound\r\n");
        route(RELAY);
        exit;
    }
}

# Generic relay
route[RELAY] {
    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
    }
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
    }
    if (is_method("INVITE")) {
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Manage NAT
route[NATMANAGE] {
    return;
}

# To voicemail handling
route[TOVOICEMAIL] {
    return;
}

# Handle presence
route[PRESENCE] {
    return;
}

####### Branch Route ########
branch_route[MANAGE_BRANCH] {
    xdbg("new branch [$T_branch_idx] to $ru\n");
    route(NATMANAGE);
}

####### OnReply Route ########
onreply_route[MANAGE_REPLY] {
    xdbg("incoming reply\n");
    if(status=~"[12][0-9][0-9]")
        route(NATMANAGE);
}

####### Failure Route ########
failure_route[MANAGE_FAILURE] {
    route(NATMANAGE);

    if (t_is_canceled()) {
        exit;
    }

    # Uncomment to enable serial forking
    # if (t_check_status("486|408")) {
    #     append_branch();
    #     route(RELAY);
    # }
} 